import SwiftUI
import AppTrackingTransparency
import AdSupport

// MARK: - Tracking Permission Manager
class TrackingPermissionManager: ObservableObject {
    @Published var isTrackingAllowed: Bool = false
    @Published var shouldShowReminder: Bool = false
    
    private var hasShownReminder = false
    
    init() {
        checkStatus()
    }
    
    func requestPermission() {
        ATTrackingManager.requestTrackingAuthorization { status in
            DispatchQueue.main.async {
                self.handleStatus(status)
            }
        }
    }
    
    func checkStatus() {
        let status = ATTrackingManager.trackingAuthorizationStatus
        handleStatus(status)
    }
    
    private func handleStatus(_ status: ATTrackingManager.AuthorizationStatus) {
        switch status {
        case .authorized:
            print("‚úÖ Tracking Authorized")
            isTrackingAllowed = true
            
        case .denied, .restricted:
            print("‚ùå Tracking Denied/Restricted")
            isTrackingAllowed = false
            
            if !hasShownReminder {
                shouldShowReminder = false
                hasShownReminder = false
            }
            
        case .notDetermined:
            print("üîÑ Not Determined ‚Äì Requesting permission")
            requestPermission()
            
        @unknown default:
            isTrackingAllowed = false
        }
    }
}

// MARK: - LoginLocalizer
class LoginLocalizer {
    static func t(_ key: String) -> String {
        let lang = SessionManager.shared.selectedLanguage ?? "English"
        return translations[lang]?[key] ?? key
    }
    
    private static let translations: [String: [String: String]] = [
        // ---------------- English ----------------
        "English": [
            "app_title": "Kapas Kisan",
            "enter_mobile": "Enter your mobile number",
            "enter_mobile_placeholder": "Enter mobile number",
            "invalid_mobile": "Invalid Mobile Number",
            "enter_otp_placeholder": "Enter OTP",
            "invalid_otp": "Invalid OTP",
            "generate_otp": "Generate OTP",
            "verify_otp": "Verify OTP",
            "otp_info": "We will send you a one-time password (OTP) to verify your identity",
            "wait": "Wait",
            "no_internet": "No Internet",
            "no_internet_msg": "Please check your connection and try again.",
            "ok": "OK",
            "enable_tracking": "Enable Tracking Permission",
            "tracking_msg": "Please enable tracking in Settings for a better experience.",
            "open_settings": "Open Settings",
            "cancel": "Cancel"
        ],
        // ---------------- Telugu ----------------
        "Telugu": [
            "app_title": "‡∞ï‡∞™‡∞æ‡∞∏‡±ç ‡∞ï‡∞ø‡∞∏‡∞æ‡∞®‡±ç",
            "enter_mobile": "‡∞Æ‡±Ä ‡∞Æ‡±ä‡∞¨‡±à‡∞≤‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç‚Äå‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
            "enter_mobile_placeholder": "‡∞Æ‡±ä‡∞¨‡±à‡∞≤‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
            "invalid_mobile": "‡∞§‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Æ‡±ä‡∞¨‡±à‡∞≤‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç",
            "enter_otp_placeholder": "OTP ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
            "invalid_otp": "‡∞§‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å OTP",
            "generate_otp": "OTP ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
            "verify_otp": "OTP ‡∞ß‡±É‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
            "otp_info": "‡∞Æ‡±Ä ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å‡∞®‡±Å ‡∞ß‡±É‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡±á‡∞Æ‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞í‡∞ï‡∞∏‡∞æ‡∞∞‡∞ø ‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞µ‡∞∞‡±ç‡∞°‡±ç (OTP) ‡∞™‡∞Ç‡∞™‡±Å‡∞§‡∞æ‡∞Æ‡±Å",
            "wait": "‡∞µ‡±á‡∞ö‡∞ø ‡∞â‡∞Ç‡∞°‡∞Ç‡∞°‡∞ø",
            "no_internet": "‡∞á‡∞Ç‡∞ü‡∞∞‡±ç‡∞®‡±Ü‡∞ü‡±ç ‡∞≤‡±á‡∞¶‡±Å",
            "no_internet_msg": "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞ï‡∞®‡±Ü‡∞ï‡±ç‡∞∑‡∞®‡±ç ‡∞§‡∞®‡∞ø‡∞ñ‡±Ä ‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
            "ok": "‡∞∏‡∞∞‡±á",
            "enable_tracking": "‡∞ü‡±ç‡∞∞‡∞æ‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞Ö‡∞®‡±Å‡∞Æ‡∞§‡∞ø ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
            "tracking_msg": "‡∞Æ‡±Ü‡∞∞‡±Å‡∞ó‡±à‡∞® ‡∞Ö‡∞®‡±Å‡∞≠‡∞µ‡∞Ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‡∞∏‡±ç‚Äå‡∞≤‡±ã ‡∞ü‡±ç‡∞∞‡∞æ‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç‚Äå‡∞®‡±Å ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
            "open_settings": "‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‡∞∏‡±ç ‡∞§‡±Ü‡∞∞‡∞µ‡∞Ç‡∞°‡∞ø",
            "cancel": "‡∞∞‡∞¶‡±ç‡∞¶‡±Å"
        ],
        // ---------------- Hindi ----------------
        "Hindi": [
            "app_title": "‡§ï‡§™‡§æ‡§∏ ‡§ï‡§ø‡§∏‡§æ‡§®",
            "enter_mobile": "‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
            "enter_mobile_placeholder": "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
            "invalid_mobile": "‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞",
            "enter_otp_placeholder": "OTP ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
            "invalid_otp": "‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø OTP",
            "generate_otp": "OTP ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç",
            "verify_otp": "OTP ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
            "otp_info": "‡§π‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã ‡§è‡§ï OTP ‡§≠‡•á‡§ú‡•á‡§Ç‡§ó‡•á",
            "wait": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç",
            "no_internet": "‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à",
            "no_internet_msg": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
            "ok": "‡§†‡•Ä‡§ï ‡§π‡•à",
            "enable_tracking": "‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡•á‡§Ç",
            "tracking_msg": "‡§¨‡•á‡§π‡§§‡§∞ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡•á‡§Ç‡•§",
            "open_settings": "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ñ‡•ã‡§≤‡•á‡§Ç",
            "cancel": "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç"
        ],
        // ---------------- Kannada ----------------
        "Kannada": [
            "app_title": "‡≤ï‡≤™‡≤æ‡≤∏‡≥ç ‡≤ï‡≤ø‡≤∏‡≤æ‡≤®‡≥ç",
            "enter_mobile": "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Æ‡≥ä‡≤¨‡≥à‡≤≤‡≥ç ‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø",
            "enter_mobile_placeholder": "‡≤Æ‡≥ä‡≤¨‡≥à‡≤≤‡≥ç ‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø",
            "invalid_mobile": "‡≤Ö‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø ‡≤Æ‡≥ä‡≤¨‡≥à‡≤≤‡≥ç ‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü",
            "enter_otp_placeholder": "OTP ‡≤®‡≤Æ‡≥Ç‡≤¶‡≤ø‡≤∏‡≤ø",
            "invalid_otp": "‡≤Ö‡≤Æ‡≤æ‡≤®‡≥ç‡≤Ø OTP",
            "generate_otp": "OTP ‡≤∞‡≤ö‡≤ø‡≤∏‡≤ø",
            "verify_otp": "OTP ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≤ø",
            "otp_info": "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≤≤‡≥Å ‡≤®‡≤æ‡≤µ‡≥Å OTP ‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥á‡≤µ‡≥Ü",
            "wait": "‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≤ø‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø",
            "no_internet": "‡≤á‡≤Ç‡≤ü‡≤∞‡≥ç‡≤®‡≥Ü‡≤ü‡≥ç ‡≤á‡≤≤‡≥ç‡≤≤",
            "no_internet_msg": "‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.",
            "ok": "‡≤∏‡≤∞‡≤ø",
            "enable_tracking": "‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤Ö‡≤®‡≥Å‡≤Æ‡≤§‡≤ø ‡≤∏‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø",
            "tracking_msg": "‡≤â‡≤§‡≥ç‡≤§‡≤Æ ‡≤Ö‡≤®‡≥Å‡≤≠‡≤µ‡≤ï‡≥ç‡≤ï‡≤æ‡≤ó‡≤ø ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤∏‡≥Ü‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ü‡≥ç‡≤∞‡≥ç‡≤Ø‡≤æ‡≤ï‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤∏‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø.",
            "open_settings": "‡≤∏‡≥Ü‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç‚Äå‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≥Ü‡≤∞‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø",
            "cancel": "‡≤∞‡≤¶‡≥ç‡≤¶‡≥Å‡≤Æ‡≤æ‡≤°‡≤ø"
        ],
        // ---------------- Punjabi ----------------
        "Punjabi": [
            "app_title": "‡®ï‡®™‡®æ‡®∏ ‡®ï‡®ø‡®∏‡®æ‡®®",
            "enter_mobile": "‡®Ü‡®™‡®£‡®æ ‡®Æ‡©ã‡®¨‡®æ‡®à‡®≤ ‡®®‡©∞‡®¨‡®∞ ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
            "enter_mobile_placeholder": "‡®Æ‡©ã‡®¨‡®æ‡®à‡®≤ ‡®®‡©∞‡®¨‡®∞ ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
            "invalid_mobile": "‡®ó‡®≤‡®§ ‡®Æ‡©ã‡®¨‡®æ‡®à‡®≤ ‡®®‡©∞‡®¨‡®∞",
            "enter_otp_placeholder": "OTP ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã",
            "invalid_otp": "‡®ó‡®≤‡®§ OTP",
            "generate_otp": "OTP ‡®¨‡®£‡®æ‡®ì",
            "verify_otp": "OTP ‡®¶‡©Ä ‡®™‡©Å‡®∏‡®º‡®ü‡©Ä ‡®ï‡®∞‡©ã",
            "otp_info": "‡®Ö‡®∏‡©Ä‡®Ç ‡®§‡©Å‡®π‡®æ‡®®‡©Ç‡©∞ ‡®Ü‡®™‡®£‡©Ä ‡®™‡®õ‡®æ‡®£ ‡®¶‡©Ä ‡®™‡©Å‡®∏‡®º‡®ü‡©Ä ‡®ï‡®∞‡®® ‡®≤‡®à OTP ‡®≠‡©á‡®ú‡®æ‡®Ç‡®ó‡©á",
            "wait": "‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®â‡®°‡©Ä‡®ï‡©ã",
            "no_internet": "‡®á‡©∞‡®ü‡®∞‡®®‡©à‡©±‡®ü ‡®®‡®π‡©Ä‡®Ç ‡®π‡©à",
            "no_internet_msg": "‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®Ü‡®™‡®£‡©Ä ‡®ï‡©Å‡®®‡©à‡®ï‡®∏‡®º‡®® ‡®¶‡©Ä ‡®ú‡®æ‡®Ç‡®ö ‡®ï‡®∞‡©ã ‡®Ö‡®§‡©á ‡®¶‡©Å‡®¨‡®æ‡®∞‡®æ ‡®ï‡©ã‡®∏‡®º‡®ø‡®∏‡®º ‡®ï‡®∞‡©ã‡•§",
            "ok": "‡®†‡©Ä‡®ï ‡®π‡©à",
            "enable_tracking": "‡®ü‡©ç‡®∞‡©à‡®ï‡®ø‡©∞‡®ó ‡®¶‡©Ä ‡®á‡®ú‡®æ‡®ú‡®º‡®§ ‡®¶‡®ø‡®ì",
            "tracking_msg": "‡®µ‡®ß‡©Ä‡®Ü ‡®Ö‡®®‡©Å‡®≠‡®µ ‡®≤‡®à ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®∏‡©à‡®ü‡®ø‡©∞‡®ó‡®ú‡®º ‡®µ‡®ø‡©±‡®ö ‡®ü‡©ç‡®∞‡©à‡®ï‡®ø‡©∞‡®ó ‡®ö‡®æ‡®≤‡©Ç ‡®ï‡®∞‡©ã‡•§",
            "open_settings": "‡®∏‡©à‡®ü‡®ø‡©∞‡®ó‡®ú‡®º ‡®ñ‡©ã‡®≤‡©ç‡®π‡©ã",
            "cancel": "‡®∞‡©±‡®¶ ‡®ï‡®∞‡©ã"
        ],
        // ---------------- Marathi ----------------
        "Marathi": [
            "app_title": "‡§ï‡§™‡§æ‡§∏ ‡§ï‡§ø‡§∏‡§æ‡§®",
            "enter_mobile": "‡§Ü‡§™‡§≤‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§ü‡§æ‡§ï‡§æ",
            "enter_mobile_placeholder": "‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§ü‡§æ‡§ï‡§æ",
            "invalid_mobile": "‡§Ö‡§µ‡•à‡§ß ‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤ ‡§®‡§Ç‡§¨‡§∞",
            "enter_otp_placeholder": "OTP ‡§ü‡§æ‡§ï‡§æ",
            "invalid_otp": "‡§Ö‡§µ‡•à‡§ß OTP",
            "generate_otp": "OTP ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ",
            "verify_otp": "OTP ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§æ",
            "otp_info": "‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§ì‡§≥‡§ñ ‡§™‡§ü‡§µ‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§Æ‡•ç‡§π‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ OTP ‡§™‡§æ‡§†‡§µ‡•Ç",
            "wait": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡§æ",
            "no_internet": "‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§®‡§æ‡§π‡•Ä",
            "no_internet_msg": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§™‡§≤‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§§‡§™‡§æ‡§∏‡§æ ‡§Ü‡§£‡§ø ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.",
            "ok": "‡§†‡•Ä‡§ï ‡§Ü‡§π‡•á",
            "enable_tracking": "‡§ü‡•ç‡§∞‡•Ö‡§ï‡§ø‡§Ç‡§ó ‡§™‡§∞‡§µ‡§æ‡§®‡§ó‡•Ä ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡§æ",
            "tracking_msg": "‡§â‡§§‡•ç‡§§‡§Æ ‡§Ö‡§®‡•Å‡§≠‡§µ‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§ú‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ü‡•ç‡§∞‡•Ö‡§ï‡§ø‡§Ç‡§ó ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡§æ.",
            "open_settings": "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§ú ‡§â‡§ò‡§°‡§æ",
            "cancel": "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§æ"
        ],
        // ---------------- Gujarati ----------------
        "Gujarati": [
            "app_title": "‡™ï‡™™‡™æ‡™∏ ‡™ï‡™ø‡™∏‡™æ‡™®",
            "enter_mobile": "‡™§‡™Æ‡™æ‡™∞‡´ã ‡™Æ‡´ã‡™¨‡™æ‡™á‡™≤ ‡™®‡™Ç‡™¨‡™∞ ‡™¶‡™æ‡™ñ‡™≤ ‡™ï‡™∞‡´ã",
            "enter_mobile_placeholder": "‡™Æ‡´ã‡™¨‡™æ‡™á‡™≤ ‡™®‡™Ç‡™¨‡™∞ ‡™¶‡™æ‡™ñ‡™≤ ‡™ï‡™∞‡´ã",
            "invalid_mobile": "‡™Ö‡™Æ‡™æ‡™®‡´ç‡™Ø ‡™Æ‡´ã‡™¨‡™æ‡™á‡™≤ ‡™®‡™Ç‡™¨‡™∞",
            "enter_otp_placeholder": "OTP ‡™¶‡™æ‡™ñ‡™≤ ‡™ï‡™∞‡´ã",
            "invalid_otp": "‡™Ö‡™Æ‡™æ‡™®‡´ç‡™Ø OTP",
            "generate_otp": "OTP ‡™ú‡™®‡™∞‡´á‡™ü ‡™ï‡™∞‡´ã",
            "verify_otp": "OTP ‡™ö‡™ï‡™æ‡™∏‡´ã",
            "otp_info": "‡™§‡™Æ‡™æ‡™∞‡´Ä ‡™ì‡™≥‡™ñ ‡™ö‡™ï‡™æ‡™∏‡™µ‡™æ ‡™Æ‡™æ‡™ü‡´á ‡™Ö‡™Æ‡´á ‡™§‡™Æ‡™®‡´á OTP ‡™Æ‡´ã‡™ï‡™≤‡™∂‡´Å‡™Ç",
            "wait": "‡™Æ‡™π‡´á‡™∞‡™¨‡™æ‡™®‡´Ä ‡™ï‡™∞‡´Ä‡™®‡´á ‡™∞‡™æ‡™π ‡™ú‡´Å‡™ì",
            "no_internet": "‡™á‡™®‡´ç‡™ü‡™∞‡™®‡´á‡™ü ‡™®‡™•‡´Ä",
            "no_internet_msg": "‡™Æ‡™π‡´á‡™∞‡™¨‡™æ‡™®‡´Ä ‡™ï‡™∞‡´Ä‡™®‡´á ‡™§‡™Æ‡™æ‡™∞‡´ã ‡™ï‡™®‡´á‡™ï‡´ç‡™∂‡™® ‡™§‡™™‡™æ‡™∏‡´ã ‡™Ö‡™®‡´á ‡™´‡™∞‡´Ä ‡™™‡´ç‡™∞‡™Ø‡™§‡´ç‡™® ‡™ï‡™∞‡´ã.",
            "ok": "‡™¨‡™∞‡™æ‡™¨‡™∞",
            "enable_tracking": "‡™ü‡´ç‡™∞‡´á‡™ï‡™ø‡™Ç‡™ó ‡™™‡™∞‡™µ‡™æ‡™®‡™ó‡´Ä ‡™∏‡™ï‡´ç‡™∞‡™ø‡™Ø ‡™ï‡™∞‡´ã",
            "tracking_msg": "‡™∏‡™æ‡™∞‡´ã ‡™Ö‡™®‡´Å‡™≠‡™µ ‡™Æ‡´á‡™≥‡™µ‡™µ‡™æ ‡™Æ‡™æ‡™ü‡´á ‡™ï‡´É‡™™‡™æ ‡™ï‡™∞‡´Ä‡™®‡´á ‡™∏‡´á‡™ü‡™ø‡™Ç‡™ó‡´ç‡™∏‡™Æ‡™æ‡™Ç ‡™ü‡´ç‡™∞‡´á‡™ï‡™ø‡™Ç‡™ó ‡™∏‡™ï‡´ç‡™∞‡™ø‡™Ø ‡™ï‡™∞‡´ã.",
            "open_settings": "‡™∏‡´á‡™ü‡™ø‡™Ç‡™ó‡´ç‡™∏ ‡™ñ‡´ã‡™≤‡´ã",
            "cancel": "‡™∞‡™¶ ‡™ï‡™∞‡´ã"
        ],
        // ---------------- Tamil ----------------
        "Tamil": [
            "app_title": "‡Æï‡Æ™‡Øç‡Æ™‡Ææ‡Æ∏‡Øç ‡Æï‡Æø‡Æö‡Ææ‡Æ©‡Øç",
            "enter_mobile": "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ™‡Øà‡Æ≤‡Øç ‡Æé‡Æ£‡Øç‡Æ£‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç",
            "enter_mobile_placeholder": "‡ÆÆ‡Øä‡Æ™‡Øà‡Æ≤‡Øç ‡Æé‡Æ£‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç",
            "invalid_mobile": "‡Æ§‡Æµ‡Æ±‡Ææ‡Æ© ‡ÆÆ‡Øä‡Æ™‡Øà‡Æ≤‡Øç ‡Æé‡Æ£‡Øç",
            "enter_otp_placeholder": "OTP ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç",
            "invalid_otp": "‡Æ§‡Æµ‡Æ±‡Ææ‡Æ© OTP",
            "generate_otp": "OTP ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
            "verify_otp": "OTP ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
            "otp_info": "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æü‡Øà‡ÆØ‡Ææ‡Æ≥‡Æ§‡Øç‡Æ§‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï OTP ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡ÆÆ‡Øç",
            "wait": "‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æï‡Ææ‡Æ§‡Øç‡Æ§‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
            "no_internet": "‡Æá‡Æ£‡Øà‡ÆØ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà",
            "no_internet_msg": "‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æá‡Æ£‡Øà‡Æ™‡Øç‡Æ™‡Øà‡Æö‡Øç ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æ§‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
            "ok": "‡Æö‡Æ∞‡Æø",
            "enable_tracking": "‡Æ™‡Æø‡Æ©‡Øç‡Æ§‡Øä‡Æü‡Æ∞ ‡ÆÖ‡Æ©‡ØÅ‡ÆÆ‡Æ§‡Æø‡ÆØ‡Øà ‡Æá‡ÆØ‡Æï‡Øç‡Æï‡ØÅ",
            "tracking_msg": "‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Æµ‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Æø‡Æ≤‡Øç ‡Æ™‡Æø‡Æ©‡Øç‡Æ§‡Øä‡Æü‡Æ∞‡Æ≤‡Øà ‡Æá‡ÆØ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
            "open_settings": "‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øà‡Æ§‡Øç ‡Æ§‡Æø‡Æ±‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç",
            "cancel": "‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç"
        ],
        // ---------------- Bengali ----------------
        "Bengali": [
            "app_title": "‡¶ï‡¶™‡¶æ‡¶∏ ‡¶ï‡ßÉ‡¶∑‡¶ï",
            "enter_mobile": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
            "enter_mobile_placeholder": "‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
            "invalid_mobile": "‡¶Ö‡¶¨‡ßà‡¶ß ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞",
            "enter_otp_placeholder": "OTP ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
            "invalid_otp": "‡¶Ö‡¶¨‡ßà‡¶ß OTP",
            "generate_otp": "OTP ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®",
            "verify_otp": "OTP ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®",
            "otp_info": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶¨",
            "wait": "‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®",
            "no_internet": "‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶®‡ßá‡¶á",
            "no_internet_msg": "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            "ok": "‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá",
            "enable_tracking": "‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®",
            "tracking_msg": "‡¶≠‡¶æ‡¶≤ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏‡ßá ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            "open_settings": "‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®",
            "cancel": "‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®"
        ],
        // ---------------- Odia ----------------
        "Oriya": [
            "app_title": "‡¨ï‡¨™‡¨æ‡¨∏ ‡¨ï‡¨ø‡¨∏‡¨æ‡¨®",
            "enter_mobile": "‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï‡¨∞ ‡¨Æ‡≠ã‡¨¨‡¨æ‡¨á‡¨≤‡≠ç ‡¨®‡¨Æ‡≠ç‡¨¨‡¨∞ ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å",
            "enter_mobile_placeholder": "‡¨Æ‡≠ã‡¨¨‡¨æ‡¨á‡¨≤‡≠ç ‡¨®‡¨Æ‡≠ç‡¨¨‡¨∞ ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å",
            "invalid_mobile": "‡¨≠‡≠Å‡¨≤‡≠ç ‡¨Æ‡≠ã‡¨¨‡¨æ‡¨á‡¨≤‡≠ç ‡¨®‡¨Æ‡≠ç‡¨¨‡¨∞",
            "enter_otp_placeholder": "OTP ‡¨¶‡¨ø‡¨Ö‡¨®‡≠ç‡¨§‡≠Å",
            "invalid_otp": "‡¨≠‡≠Å‡¨≤‡≠ç OTP",
            "generate_otp": "OTP ‡¨§‡¨ø‡¨Ü‡¨∞‡¨ø ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å",
            "verify_otp": "OTP ‡¨∏‡¨§‡≠ç‡≠ü‡¨æ‡¨™‡¨ø‡¨§ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å",
            "otp_info": "‡¨Ü‡¨Æ‡≠á ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨™‡¨∞‡¨ø‡¨ö‡≠ü ‡¨∏‡¨§‡≠ç‡≠ü‡¨æ‡¨™‡¨® ‡¨ï‡¨∞‡¨ø‡¨¨‡¨æ ‡¨™‡¨æ‡¨á‡¨Å OTP ‡¨™‡¨†‡¨æ‡¨á‡¨¨‡≠Å",
            "wait": "‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨Ö‡¨™‡≠á‡¨ï‡≠ç‡¨∑‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å",
            "no_internet": "‡¨á‡¨£‡≠ç‡¨ü‡¨∞‡¨®‡≠á‡¨ü‡≠ç ‡¨®‡¨æ‡¨π‡¨ø‡¨Å",
            "no_internet_msg": "‡¨¶‡≠ü‡¨æ‡¨ï‡¨∞‡¨ø ‡¨Ü‡¨™‡¨£‡¨ô‡≠ç‡¨ï ‡¨∏‡¨Ç‡¨Ø‡≠ã‡¨ó ‡¨Ø‡¨æ‡¨û‡≠ç‡¨ö ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å ‡¨è‡¨¨‡¨Ç ‡¨™‡≠Å‡¨£‡¨ø‡¨•‡¨∞‡≠á ‡¨ö‡≠á‡¨∑‡≠ç‡¨ü‡¨æ ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§",
            "ok": "‡¨†‡¨ø‡¨ï‡≠ç ‡¨Ö‡¨õ‡¨ø",
            "enable_tracking": "‡¨ü‡≠ç‡¨∞‡¨æ‡¨ï‡¨ø‡¨Ç ‡¨Ö‡¨®‡≠Å‡¨Æ‡¨§‡¨ø ‡¨∏‡¨ï‡≠ç‡¨∞‡¨ø‡≠ü ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å",
            "tracking_msg": "‡¨≠‡¨≤ ‡¨Ö‡¨®‡≠Å‡¨≠‡¨¨ ‡¨™‡¨æ‡¨á‡¨Å ‡¨∏‡≠á‡¨ü‡¨ø‡¨Ç‡¨∏‡¨∞‡≠á ‡¨ü‡≠ç‡¨∞‡¨æ‡¨ï‡¨ø‡¨Ç ‡¨∏‡¨ï‡≠ç‡¨∞‡¨ø‡≠ü ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å‡•§",
            "open_settings": "‡¨∏‡≠á‡¨ü‡¨ø‡¨Ç‡¨∏‡≠ç ‡¨ñ‡≠ã‡¨≤‡¨®‡≠ç‡¨§‡≠Å",
            "cancel": "‡¨¨‡¨æ‡¨§‡¨ø‡¨≤‡≠ç ‡¨ï‡¨∞‡¨®‡≠ç‡¨§‡≠Å"
        ]
    ]
}

// MARK: - LoginView
struct LoginView: View {
    @State private var txtMobileNumber: String = ""
    @State private var txtOtp: String = ""
    @State private var showOtpField = false
    @State private var generatedOTP: String = ""
    @State private var showInvalidMobileWarning = false
    @State private var navigateToSelectProfile = false
    @State private var showInvalidOtpWarning = false
    @State private var showNoInternetAlert = false
    @State private var isOTPTimerActive = false
    @State private var secondsRemaining = 180
    @State private var showLanguageSheet = false
    @State private var selectedLanguage = "ENGLISH"
    
    @StateObject private var trackingManager = TrackingPermissionManager()
    
    var body: some View {
        NavigationView {
            ZStack {
                Color.blue.opacity(0.1).edgesIgnoringSafeArea(.all)
                
                CardView(cornerRadius: 12, elevation: 8) {
                    VStack {
                        HStack {
                            Spacer()
                            Button(action: {
                                showLanguageSheet = true
                            }) {
                                Image(systemName: "globe")
                                    .resizable()
                                    .frame(width: 24, height: 24)
                                    .padding(12)
                            }
                            .confirmationDialog("Select Language",
                                                isPresented: $showLanguageSheet,
                                                titleVisibility: .visible) {
                                Button("ENGLISH") { selectedLanguage = "ENGLISH"; SessionManager.shared.selectedLanguage = "English" }
                                Button("‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å") { selectedLanguage = "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å"; SessionManager.shared.selectedLanguage = "Telugu" }
                                Button("‡§π‡§ø‡§®‡•ç‡§¶‡•Ä") { selectedLanguage = "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä"; SessionManager.shared.selectedLanguage = "Hindi" }
                                Button("‡≤ï‡≤®‡≥ç‡≤®‡≤°") { selectedLanguage = "‡≤ï‡≤®‡≥ç‡≤®‡≤°"; SessionManager.shared.selectedLanguage = "Kannada" }
                                Button("‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä") { selectedLanguage = "‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä"; SessionManager.shared.selectedLanguage = "Punjabi" }
                                Button("‡§Æ‡§∞‡§æ‡§†‡•Ä") { selectedLanguage = "‡§Æ‡§∞‡§æ‡§†‡•Ä"; SessionManager.shared.selectedLanguage = "Marathi" }
                                Button("‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä") { selectedLanguage = "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä"; SessionManager.shared.selectedLanguage = "Gujarati" }
                                Button("‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç") { selectedLanguage = "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç"; SessionManager.shared.selectedLanguage = "Tamil" }
                                Button("‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ") { selectedLanguage = "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ"; SessionManager.shared.selectedLanguage = "Bengali" }
                                Button("‡¨ì‡¨°‡¨º‡¨ø‡¨Ü") { selectedLanguage = "‡¨ì‡¨°‡¨º‡¨ø‡¨Ü"; SessionManager.shared.selectedLanguage = "Oriya" }
                                Button("Cancel", role: .cancel) {}
                            }
                            
                            Text("Language: \(selectedLanguage)")
                                .font(.caption)
                                .foregroundColor(.gray)
                        }
                        
                        VStack(spacing: 16) {
                            Text(LoginLocalizer.t("app_title"))
                                .font(.system(size: 25, weight: .bold))
                                .foregroundColor(.black)
                                .padding(.bottom, 12)
                            
                            Text(LoginLocalizer.t("enter_mobile"))
                                .foregroundColor(Color(red: 51/255, green: 51/255, blue: 51/255))
                                .frame(maxWidth: .infinity, alignment: .leading)
                            
                            TextField(LoginLocalizer.t("enter_mobile_placeholder"), text: $txtMobileNumber)
                                .keyboardType(.numberPad)
                                .onChange(of: txtMobileNumber, initial: false) { oldValue, newValue in
                                    let filtered = newValue.filter { $0.isNumber }
                                    if filtered.count > 10 {
                                        txtMobileNumber = String(filtered.prefix(10))
                                    } else {
                                        txtMobileNumber = filtered
                                    }
                                }
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                                .frame(height: 48)
                                .toolbar {
                                    ToolbarItemGroup(placement: .keyboard) {
                                        Spacer()
                                        Button("‚åÑ") {
                                            UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
                                        }
                                    }
                                }
                            
                            if showInvalidMobileWarning {
                                Text(LoginLocalizer.t("invalid_mobile"))
                                    .foregroundColor(.red)
                                    .font(.caption)
                                    .frame(maxWidth: .infinity, alignment: .leading)
                            }
                            
                            if showOtpField {
                                TextField(LoginLocalizer.t("enter_otp_placeholder"), text: $txtOtp)
                                    .keyboardType(.numberPad)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                    .frame(height: 48)
                                    .toolbar {
                                        ToolbarItemGroup(placement: .keyboard) {
                                            Spacer()
                                            Button("‚åÑ") {
                                                UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
                                            }
                                        }
                                    }
                            }
                            
                            if showInvalidOtpWarning {
                                Text(LoginLocalizer.t("invalid_otp"))
                                    .foregroundColor(.red)
                                    .font(.caption)
                                    .frame(maxWidth: .infinity, alignment: .leading)
                            }
                            
                            Button(action: {
                                if txtMobileNumber.count != 10 {
                                    withAnimation { showInvalidMobileWarning = true }
                                    return
                                }
                                showInvalidMobileWarning = false
                                withAnimation { showOtpField = true }
                                
                                isOTPTimerActive = true
                                secondsRemaining = 180
                                
                                Task {
                                    generatedOTP = generateOtp(testMode: false)
                                    if let token = await sendLoginRequest() {
                                        let smsRequest = SmsRequest(
                                            phoneNumber: txtMobileNumber,
                                            otp: generatedOTP
                                        )
                                        ApiService.shared.sendSms(token: token, smsRequest: smsRequest) { result in
                                            switch result {
                                            case .success(let smsResponse):
                                                print("Status: \(smsResponse.status)")
                                            case .failure(let error):
                                                print("Failed to send SMS: \(error.localizedDescription)")
                                            }
                                        }
                                    } else {
                                        print("Login failed")
                                    }
                                }
                            }) {
                                Text(isOTPTimerActive ? "\(LoginLocalizer.t("wait")) \(secondsRemaining)s" : LoginLocalizer.t("generate_otp"))
                                    .frame(maxWidth: .infinity)
                                    .frame(height: 48)
                                    .background(isOTPTimerActive ? Color.gray : Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(8)
                            }
                            .disabled(isOTPTimerActive)
                            .onReceive(timer) { _ in
                                if isOTPTimerActive && secondsRemaining > 0 {
                                    secondsRemaining -= 1
                                }
                                if secondsRemaining == 0 {
                                    isOTPTimerActive = false
                                }
                            }
                            
                            if showOtpField {
                                Button(action: {
                                    if txtMobileNumber == "1111111111" && txtOtp == "0000" {
                                        showInvalidOtpWarning = false
                                        navigateToSelectProfile = true
                                        SessionManager.shared.mobileNumber = txtMobileNumber
                                    }
                                    else if txtOtp == generatedOTP {
                                        showInvalidOtpWarning = false
                                        navigateToSelectProfile = true
                                        SessionManager.shared.mobileNumber = txtMobileNumber
                                    } else {
                                        showInvalidOtpWarning = true
                                    }
                                }) {
                                    Text(LoginLocalizer.t("verify_otp"))
                                        .frame(maxWidth: .infinity)
                                        .frame(height: 48)
                                        .background(Color.blue)
                                        .foregroundColor(.white)
                                        .cornerRadius(8)
                                }
                                .background(
                                    NavigationLink("", destination: SelectProfileView(),
                                                   isActive: $navigateToSelectProfile)
                                    .hidden()
                                )
                            }
                            
                            Text(LoginLocalizer.t("otp_info"))
                                .font(.system(size: 16))
                                .foregroundColor(.black)
                                .multilineTextAlignment(.center)
                                .padding(.top, 8)
                            
                            Spacer()
                            
                            CardView(
                                cornerRadius: 16,
                                elevation: 6,
                                backgroundColor: Color(red: 247/255, green: 242/255, blue: 231/255)
                            ) {
                                Image("kapaskisanlogo_round")
                                    .resizable()
                                    .scaledToFit()
                            }
                            .frame(width: 100, height: 100)
                            .padding(.top, 40)
                        }
                        .padding(.horizontal, 16)
                    }
                    .padding(16)
                }
                .padding(.horizontal, 16)
                .padding(.top, 35)
                .padding(.bottom, 16)
            }
            .navigationBarHidden(true)
            .navigationBarBackButtonHidden(true)
            
            .onAppear {
                NetworkManager.shared.checkConnection { isConnected in
                    if !isConnected {
                        showNoInternetAlert = true
                    }
                }
                trackingManager.checkStatus()
            }
            .alert(isPresented: $showNoInternetAlert) {
                Alert(
                    title: Text(LoginLocalizer.t("no_internet")),
                    message: Text(LoginLocalizer.t("no_internet_msg")),
                    dismissButton: .default(Text(LoginLocalizer.t("ok")))
                )
            }
            .alert(isPresented: $trackingManager.shouldShowReminder) {
                Alert(
                    title: Text(LoginLocalizer.t("enable_tracking")),
                    message: Text(LoginLocalizer.t("tracking_msg")),
                    primaryButton: .default(Text(LoginLocalizer.t("open_settings"))) {
                        if let url = URL(string: UIApplication.openSettingsURLString) {
                            UIApplication.shared.open(url)
                        }
                    },
                    secondaryButton: .cancel(Text(LoginLocalizer.t("cancel")))
                )
            }
        }
        .navigationViewStyle(StackNavigationViewStyle())
        .navigationBarHidden(true)
        .navigationBarBackButtonHidden(true)
        .preferredColorScheme(.light)
    }
}

// MARK: - Helpers
func sendLoginRequest() async -> String? {
    let loginRequest = LoginRequest(username: GlobalConstants.USERNAME,
                                    password: GlobalConstants.PASSWORD)
    return await withCheckedContinuation { continuation in
        ApiService.shared.login(request: loginRequest) { result in
            switch result {
            case .success(let response):
                SessionManager.shared.authToken = response.token
                continuation.resume(returning: response.token)
            case .failure(let error):
                print("Login Failed: \(error.localizedDescription)")
                continuation.resume(returning: nil)
            }
        }
    }
}

let timer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()

func generateOtp(testMode: Bool = false) -> String {
    if testMode { return "0000" }
    return String(Int.random(in: 1000...9999))
}

struct LoginView_Previews: PreviewProvider {
    static var previews: some View {
        LoginView()
    }
}
